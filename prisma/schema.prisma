// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// model User {
//   id       Int       @id @default(autoincrement())
//   email    String    @unique
//   name     String?
//   articles Article[]
// }

// model Article {
//   id       Int     @id @default(autoincrement())
//   title    String
//   body     String?
//   author   User    @relation(fields: [authorId], references: [id])
//   authorId Int
// }

// model User {
//   id        String @id @default(uuid())
//   firstName String
//   lastName  String
//   age       Int

//   houseOwned House[] @relation("HouseOwner")
//   houseBuilt House[] @relation("HouseBuilder")

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model House {
//   id      String  @id @default(uuid())
//   address String  @unique
//   state   String?

//   ownerId String
//   owner   User   @relation("HouseOwner", fields: [ownerId], references: [id])

//   builderId String
//   builder   User   @relation("HouseBuilder", fields: [builderId], references: [id])

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }
// The `User` model represents a user in your system.
// It has a one-to-one relationship with the `Profile` model (each user has one profile).
// It also has a one-to-many relationship with the `Order` model (a user can place many orders).

model User {
  id String @id @default(cuid()) // Primary key with a default value of cuid

  name  String // User's name
  email String // User's email

  createdAt DateTime @default(now()) // Timestamp for user creation
  updatedAt DateTime @updatedAt // Automatically updated timestamp on modification

  profile Profile? // One-to-one relationship: optional user profile
  Order   Order[] // One-to-many relationship: a user can have multiple orders
}

// The `Profile` model represents a user profile, related to a single `User`.
// It has a one-to-one relationship with the `User` model (a profile belongs to one user).

model Profile {
  id String @id @default(cuid()) // Primary key with a default value of cuid

  name String // Profile name

  userId String @unique // Foreign key for the user (unique because one user has one profile)
  user   User   @relation(fields: [userId], references: [id]) // Relation to the `User` model

  createdAt DateTime @default(now()) // Timestamp for profile creation
  updatedAt DateTime @updatedAt // Automatically updated timestamp on modification
}

// The `Order` model represents an order placed by a user.
// It has a one-to-many relationship with the `Product` model (an order can contain multiple products).
// It also has a many-to-one relationship with the `User` model (an order belongs to one user).

model Order {
  id String @id @default(cuid()) // Primary key with a default value of cuid

  userId String @unique // Foreign key for the user (an order belongs to one user)
  user   User   @relation(fields: [userId], references: [id]) // Relation to the `User` model

  createdAt DateTime @default(now()) // Timestamp for order creation
  updatedAt DateTime @updatedAt // Automatically updated timestamp on modification

  product Product[] // One-to-many relationship: an order can have multiple products
}

// The `Category` model represents a hierarchical product category.
// It has a self-referencing parent-child relationship (a category can have a parent category and multiple child categories).
// It also has a one-to-many relationship with the `Product` model (a category can have multiple products).

model Category {
  id String @id @default(cuid()) // Primary key with a default value of cuid

  name String // Category name

  parentId String? // Foreign key to reference the parent category
  parent   Category? @relation("CategoryToCategory", fields: [parentId], references: [id]) // Self-referencing relation for parent category

  children Category[] @relation("CategoryToCategory") // Self-referencing relation for child categories

  Product Product[] // One-to-many relationship: a category can contain multiple products

  createdAt DateTime @default(now()) // Timestamp for category creation
  updatedAt DateTime @updatedAt // Automatically updated timestamp on modification
}

// The `Product` model represents a product being sold.
// It has a many-to-many relationship with the `Order` model (a product can belong to multiple orders, and an order can contain multiple products).
// It also has a many-to-one relationship with the `Category` model (a product belongs to one or more categories).

model Product {
  id String @id @default(cuid()) // Primary key with a default value of cuid

  name        String // Product name
  description String // Product description
  price       Int // Product price

  category Category[] // Many-to-one relationship: a product belongs to one or more categories

  order Order[] // Many-to-many relationship: a product can belong to multiple orders

  createdAt DateTime @default(now()) // Timestamp for product creation
  updatedAt DateTime @updatedAt // Automatically updated timestamp on modification
}
